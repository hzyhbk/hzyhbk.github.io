<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hzyhbk</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hzyhbk.github.io/"/>
  <updated>2020-01-08T12:49:37.497Z</updated>
  <id>http://hzyhbk.github.io/</id>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>antd表格合并单元格，并且支持导出excel</title>
    <link href="http://hzyhbk.github.io/start/export-excel/"/>
    <id>http://hzyhbk.github.io/start/export-excel/</id>
    <published>2020-01-07T11:48:09.000Z</published>
    <updated>2020-01-08T12:49:37.497Z</updated>
    
    <content type="html"><![CDATA[<p>最近接到个报表的需求，需要展示<strong>合并单元格的表格</strong>，并且还要支持<strong>导出excel</strong>。粗略一看，不就两个功能嘛，但是在实现的过程中发现其实要做的还是挺多的，所以在这里记录分享一下。</p><h2 id="一、合并单元格的实现"><a href="#一、合并单元格的实现" class="headerlink" title="一、合并单元格的实现"></a>一、合并单元格的实现</h2><a id="more"></a><p>合并单元格这个功能的实现用的是antd的table组件。下面是antd-table组件行列合并功能的使用介绍：</p><blockquote><p>表格支持行/列合并，使用 render 里的单元格属性 colSpan 或者 rowSpan 设值为 0 时，设置的表格不会渲染。</p></blockquote><p>光看这句话好像还不太好理解，看下<a href="https://ant.design/components/table-cn/#components-table-demo-colspan-rowspan" target="_blank" rel="noopener">官方例子</a>的代码就好理解多了。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  title: <span class="string">'Name'</span>,</span><br><span class="line">  dataIndex: <span class="string">'name'</span>,</span><br><span class="line">  render: <span class="function">(<span class="params">text, row, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> obj = &#123;</span><br><span class="line">      children: text,</span><br><span class="line">      props: &#123;&#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (index === <span class="number">2</span>) &#123;</span><br><span class="line">      obj.props.rowSpan = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// These two are merged into above cell</span></span><br><span class="line">    <span class="keyword">if</span> (index === <span class="number">3</span>) &#123;</span><br><span class="line">      obj.props.rowSpan = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>我来解读一下上面这一项的意思：当 <code>index === 2</code>，把这一行的 <code>rowSpan</code> 设置为<strong>2</strong>，也就是第三条数据的时候，这一个单元格需要<strong>占两格</strong>，那么对应的它后面的一行，也就是 <code>index === 3</code> 这一行就只能占0格了，也就是需要把<code>index === 3</code>时候的 <code>rowSpan</code>设置为<strong>0</strong>。</p><p>了解了antd-table组件怎么设置单元格合并，下面就可以开始实现了。无非就是计算一下每一列里，每一项出现的次数，然后再设置下 <code>rowSpan</code> 的值就好了。但是在开始计算之前，还需要做一些准备工作：</p><ul><li>后端在返回数据的时候是通过 <em>树形结构</em> 返回的，而渲染表格用到的数据是 <em>数组</em> 的形式，所以我需要手动先转化一遍数据；</li><li>其次还要对数据按照表格每一列来排一次序，至于为什么排序，后面再说</li></ul><h3 id="1-处理原始数据"><a href="#1-处理原始数据" class="headerlink" title="1. 处理原始数据"></a>1. 处理原始数据</h3><p>后端返回的数据是这样子的：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mockData = [&#123;</span><br><span class="line">  children: [&#123;</span><br><span class="line">    children: [&#123;</span><br><span class="line">      children: [],</span><br><span class="line">      rate: <span class="number">0.3333333333333333</span>,</span><br><span class="line">      name: <span class="string">'需求1'</span>,</span><br><span class="line">      cost: <span class="number">3</span>,</span><br><span class="line">      id: <span class="number">5</span>,</span><br><span class="line">      projectId: <span class="number">1</span>,</span><br><span class="line">      projectName: <span class="string">'test1'</span>,</span><br><span class="line">      assigner: <span class="string">'张三'</span>,</span><br><span class="line">    &#125;],</span><br><span class="line">    name: <span class="string">'迭代一'</span>,</span><br><span class="line">    rate: <span class="number">0.75</span>,</span><br><span class="line">    cost: <span class="number">9</span>,</span><br><span class="line">    id: <span class="number">2</span>,</span><br><span class="line">  &#125;],</span><br><span class="line">  name: <span class="string">'项目一'</span>,</span><br><span class="line">  cost: <span class="number">12</span>,</span><br><span class="line">  id: <span class="number">1</span>,</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure></p><p><strong>上面的数据层级有三级，表示的含义就是表格至少会有三列，而且前三列的数据是需要做合并单元格操作的</strong>。树形结构数据首先就想到了用递归的方式，因此我需要通过递归来把这种类型的数据给<strong>拍平</strong>成数组，并且拿到每一级的信息。下面是我拍平之后的结果（firstColName、secondColName、thirdColName 就是表格的列标题，也可以是表格每一列的dataIndex字段，这里为了省事，我直接拿列标题来用了）。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> flatMockData = [</span><br><span class="line">  &#123;</span><br><span class="line">    firstColName: &#123;</span><br><span class="line">      name: <span class="string">'项目一'</span>,</span><br><span class="line">      cost: <span class="number">12</span>,</span><br><span class="line">      id: <span class="number">1</span>,</span><br><span class="line">      children: <span class="comment">//...</span></span><br><span class="line">    &#125;,</span><br><span class="line">    secondColName: &#123;</span><br><span class="line">      name: <span class="string">'迭代一'</span>,</span><br><span class="line">      rate: <span class="number">0.75</span>,</span><br><span class="line">      cost: <span class="number">9</span>,</span><br><span class="line">      id: <span class="number">2</span>,</span><br><span class="line">      children: <span class="comment">//...</span></span><br><span class="line">    &#125;,</span><br><span class="line">    thirdColName: &#123;</span><br><span class="line">      rate: <span class="number">0.3333333333333333</span>,</span><br><span class="line">      name: <span class="string">'需求一'</span>,</span><br><span class="line">      cost: <span class="number">3</span>,</span><br><span class="line">      id: <span class="number">5</span>,</span><br><span class="line">      projectId: <span class="number">1</span>,</span><br><span class="line">      projectName: <span class="string">'test1'</span>,</span><br><span class="line">      assigner: <span class="string">'张三'</span>,</span><br><span class="line">      children: <span class="comment">//...,</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>要让 <strong>树形结构每一级</strong> 和 <strong>表格的每一列</strong> 对应起来，原始数据肯定是不够的，还需要额外一个参数来表示每一级的深度，这样我就能把每一级的数据和表格列名对应起来。</p><h4 id="1-1-树形结构数据加上层级参数"><a href="#1-1-树形结构数据加上层级参数" class="headerlink" title="1.1 树形结构数据加上层级参数"></a>1.1 树形结构数据加上层级参数</h4><p>这一步很好实现，一个递归就好了，直接上代码。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addDeepsToTreeData</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  data: ITreeDataItem[],</span></span></span><br><span class="line"><span class="function"><span class="params">  depsNum: number = <span class="number">0</span>,</span></span></span><br><span class="line">): ITreeDataDepsItem[] &#123;</span><br><span class="line">  <span class="keyword">return</span> data.map(<span class="function"><span class="params">item</span> =&gt;</span> (&#123;</span><br><span class="line">    ...item,</span><br><span class="line">    __deps: depsNum, <span class="comment">// 表示层级的参数</span></span><br><span class="line">    children: addDeepsToTreeData(item.children, depsNum + <span class="number">1</span>),</span><br><span class="line">  &#125;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="1-2-拍平树形结构数据"><a href="#1-2-拍平树形结构数据" class="headerlink" title="1.2 拍平树形结构数据"></a>1.2 拍平树形结构数据</h4><p>因为之前我们已经给树形结构的每一层都加了表示层级的参数，这样做就是为了在拍平数据这一步的时候能很快和表格的列名对应起来。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> colNameList = [<span class="string">'firstColName'</span>, <span class="string">'secondColName'</span>, <span class="string">'thirdColName'</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFlatData</span>(<span class="params">data: ITreeDepsDataItem[], colNameList: string[]</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> array: &#123; [k: string]: ITreeDepsDataItem &#125;[] = [];</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">convert</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    data: ITreeDepsDataItem[],</span></span></span><br><span class="line"><span class="function"><span class="params">    parentItem: &#123; [k: string]: any &#125; = &#123;&#125;, <span class="regexp">//</span> 上一级的信息</span></span></span><br><span class="line"><span class="function"><span class="params">  </span>) </span>&#123;</span><br><span class="line">    _.forEach(data, item =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (item.children &amp;&amp; item.children.length !== <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (parentItem) &#123;</span><br><span class="line">          <span class="comment">// 如果自己的children不为空，并且有上几级信息</span></span><br><span class="line">          <span class="comment">// 就加上自己这一级的信息，继续往下传递</span></span><br><span class="line">          convert(item.children, &#123;</span><br><span class="line">            ...parentItem,</span><br><span class="line">            [colNameList[item.__deps]]: item,</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 如果自己的children不为空 ，但是没有上几级的信息没有上一级信息</span></span><br><span class="line">          <span class="comment">// 就把自己这一级的信息传递下去</span></span><br><span class="line">          convert(item.children, &#123; [colNameList[item.__deps]]: item &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// children为空说明走到最后一级了</span></span><br><span class="line">        <span class="comment">// 这时，表格一行里所有列的数据都获取到了，就push到临时数组里</span></span><br><span class="line">        array.push(&#123; ...parentItem,[colNameList[item.__deps]]: item,  &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  convert(data);</span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h4 id="1-3-排序拍平之后的数组"><a href="#1-3-排序拍平之后的数组" class="headerlink" title="1.3 排序拍平之后的数组"></a>1.3 排序拍平之后的数组</h4><p>比如最后的表格有三列需要合并单元格，每一行就要根据这三列综合来排序；最后的表格有n列需要合并单元格，那么每一行就要根据这n列综合来排序，这样做是为了保证合并的都是重复出现的单元格。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取单个条件的排序函数</span></span><br><span class="line">type BooleanFn&lt;T&gt; = <span class="function">(<span class="params">x: T, y: T</span>) =&gt;</span> boolean;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSort</span>&lt;<span class="title">T</span>&gt;(<span class="params">fn: BooleanFn&lt;T&gt;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">a: T, b: T</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (fn.call(<span class="keyword">this</span>, a, b)) &#123;</span><br><span class="line">      ret = <span class="number">-1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fn.call(<span class="keyword">this</span>, b, a)) &#123;</span><br><span class="line">      ret = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取多个条件的排序函数</span></span><br><span class="line">type NumberFn&lt;T&gt; = <span class="function">(<span class="params">x: T, y: T</span>) =&gt;</span> number;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMutipSort</span>&lt;<span class="title">T</span>&gt;(<span class="params">arr: NumberFn&lt;T&gt;[]</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">a: T, b: T</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> tmp, i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      tmp = arr[i++](a, b);</span><br><span class="line">    &#125; <span class="keyword">while</span> (tmp == <span class="number">0</span> &amp;&amp; i &lt; arr.length);</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据多个条件排序数据</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSortableData</span>(<span class="params">flatData: &#123; [k: string]: ITreeDepsDataItem &#125;[],colNameList: string[]</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> sortableData = _.cloneDeep(flatData);</span><br><span class="line">  <span class="keyword">const</span> sortArr = colNameList.map(<span class="function"><span class="params">item</span> =&gt;</span></span><br><span class="line">    getSort&lt;&#123; [k: string]: ITreeDepsDataItem &#125;&gt;<span class="function">(<span class="params">(a, b</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (a[item] &amp;&amp; b[item]) &#123;</span><br><span class="line">        <span class="keyword">return</span> a[item].name.toUpperCase() &lt; b[item].name.toUpperCase();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;),</span><br><span class="line">  );</span><br><span class="line">  sortableData.sort(getMutipSort(sortArr));</span><br><span class="line">  <span class="keyword">return</span> sortableData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>到这里，数据就已经处理好了。下面就是计算每一行下面每一个单元格出现的次数</p><h3 id="2-计算每一行里每个单元格出现的次数"><a href="#2-计算每一行里每个单元格出现的次数" class="headerlink" title="2. 计算每一行里每个单元格出现的次数"></a>2. 计算每一行里每个单元格出现的次数</h3><p>循环排好序的数据，计算一行里所有单元格的重复次数（以 <code>${name}_${id}</code> 作为数据的唯一标识，只用 <code>id</code> 做唯一标识也可以），并把结果存在以 <strong>这一行里第一个单元格数据的唯一标识</strong> 作为key的对象中。这句话可能有点不好理解，所以我用下面的数据来解释下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设这是已经排好序的数据</span></span><br><span class="line"><span class="keyword">const</span> sortableData = [&#123;</span><br><span class="line">  firstColName: &#123; <span class="attr">name</span>: <span class="string">'项目一'</span>, <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">cost</span>: <span class="number">12</span>, <span class="attr">children</span>: [] &#125;,</span><br><span class="line">  secondColName: &#123; <span class="attr">name</span>: <span class="string">'迭代一'</span>, <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">rate</span>: <span class="number">0.75</span>, <span class="attr">cost</span>: <span class="number">9</span>, <span class="attr">children</span>: [] &#125;,</span><br><span class="line">  thirdColName: &#123; <span class="attr">name</span>: <span class="string">'需求一'</span>, <span class="attr">id</span>: <span class="number">5</span>, <span class="attr">rate</span>: <span class="number">0.25</span>, <span class="attr">cost</span>: <span class="number">3</span>, <span class="attr">projectId</span>: <span class="number">1</span>, <span class="attr">projectName</span>: <span class="string">'项目一'</span>, <span class="attr">assigner</span>: <span class="string">'张三'</span>, <span class="attr">children</span>: [], &#125;</span><br><span class="line">&#125;,&#123;</span><br><span class="line">  firstColName: &#123; <span class="attr">name</span>: <span class="string">'项目一'</span>, <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">cost</span>: <span class="number">12</span>, <span class="attr">children</span>: [] &#125;,</span><br><span class="line">  secondColName: &#123; <span class="attr">name</span>: <span class="string">'迭代一'</span>, <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">rate</span>: <span class="number">0.75</span>, <span class="attr">cost</span>: <span class="number">9</span>,  <span class="attr">children</span>: [] &#125;,</span><br><span class="line">  thirdColName: &#123; <span class="attr">name</span>: <span class="string">'需求二'</span>, <span class="attr">id</span>: <span class="number">6</span>, <span class="attr">rate</span>: <span class="number">0.25</span>, <span class="attr">cost</span>: <span class="number">3</span>, <span class="attr">projectId</span>: <span class="number">1</span>, <span class="attr">projectName</span>: <span class="string">'项目一'</span>, <span class="attr">assigner</span>: <span class="string">'李四'</span>, <span class="attr">children</span>: [], &#125;</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算之后的重复次数就是这样</span></span><br><span class="line"><span class="comment">// 这个重复出现的次数就是后面 render 函数返回的 rowSpan 的值。</span></span><br><span class="line"><span class="keyword">const</span> cellRepetitions = &#123;</span><br><span class="line">  项目一_1: &#123;</span><br><span class="line">    项目一_1: <span class="number">2</span>,</span><br><span class="line">    迭代一_2: <span class="number">2</span>,</span><br><span class="line">    需求一_5: <span class="number">1</span>,</span><br><span class="line">    需求二_6: <span class="number">1</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面是计算重复次数的函数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取每一组数据里重复出现的数据的次数</span></span><br><span class="line">type IObjNumber = &#123; [k: string]: number &#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCellRepetitions</span>(<span class="params">sortableData:&#123; [k: string]: ITreeDepsDataItem &#125;[], colNameList: string[]</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 表格第一列的列名</span></span><br><span class="line">  <span class="keyword">const</span> parentColName = colNameList[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">const</span> cellRepetitions: &#123;</span><br><span class="line">    [k: string]: IObjNumber | number;</span><br><span class="line">  &#125; = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 循环排好序的数据，item代表每一行</span></span><br><span class="line">  _.forEach(sortableData, item =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> parentColVal = <span class="string">`<span class="subst">$&#123;item[parentColName].name&#125;</span>_<span class="subst">$&#123;item[parentColName].id&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">if</span> (!cellRepetitions[parentColVal]) &#123;</span><br><span class="line">      cellRepetitions[parentColVal] = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 循环列名，item[col]代表这一行里每一个单元格</span></span><br><span class="line">    _.forEach(colNameList, col =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (item[col]) &#123;</span><br><span class="line">        <span class="keyword">const</span> colValue = <span class="string">`<span class="subst">$&#123;item[col].name&#125;</span>_<span class="subst">$&#123;item[col].id&#125;</span>`</span>;</span><br><span class="line">        cellRepetitions[<span class="string">`__dot_<span class="subst">$&#123;col&#125;</span>`</span>] = <span class="number">0</span>; <span class="comment">//后面在render的时候会用到的标志位</span></span><br><span class="line">        <span class="keyword">if</span> ((cellRepetitions[parentColVal] <span class="keyword">as</span> IObjNumber)[colValue]) &#123;</span><br><span class="line">          (cellRepetitions[parentColVal] <span class="keyword">as</span> IObjNumber)[colValue]++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          (cellRepetitions[parentColVal] <span class="keyword">as</span> IObjNumber)[colValue] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> cellRepetitions;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-render函数"><a href="#3-render函数" class="headerlink" title="3. render函数"></a>3. render函数</h3><p>计算好了重复次数之后，下面就可以写列的 <code>render</code> 函数了。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以下是使用自己封装的 renderContent 的例子</span></span><br><span class="line"><span class="comment">// renderContent 函数接收三个参数</span></span><br><span class="line"><span class="comment">// 第一个参数是 antd-table 原始render函数的所有参数</span></span><br><span class="line"><span class="comment">// 第二个参数是列名</span></span><br><span class="line"><span class="comment">// 第三个参数为可选参数，不传的话默认返回name字段的值，传了的话就可以自定义返回内容</span></span><br><span class="line">&#123;</span><br><span class="line">  name: <span class="string">'colName'</span>,</span><br><span class="line">  dataIndex: <span class="string">'colName'</span>,</span><br><span class="line">  render: <span class="function">(<span class="params">...rest</span>) =&gt;</span> renderContent(rest, <span class="string">'colName'</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取表格每项的render函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRenderContent</span>(<span class="params">cellRepetitions: &#123; [k: string]: IObjNumber | number; &#125;, colNameList: string[]</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> parentColName = colNameList[<span class="number">0</span>];</span><br><span class="line">  <span class="comment">// 这里需要实时修改前面留下的 __dot标志位，所以先拷贝一份数据</span></span><br><span class="line">  <span class="keyword">const</span> countObj = _.cloneDeep(cellRepetitions);</span><br><span class="line">  <span class="keyword">const</span> renderContent: IRenderContent = (</span><br><span class="line">    rest: any,</span><br><span class="line">    name: string,</span><br><span class="line">    userRenderText?: IRenderText, <span class="comment">// 自定义表格返回什么格式的数据</span></span><br><span class="line">  ) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> [v, row, index] = rest;</span><br><span class="line">    <span class="keyword">const</span> textForRender = userRenderText ? userRenderText(row) : v.name;</span><br><span class="line">    <span class="keyword">const</span> obj: &#123;</span><br><span class="line">      children: string;</span><br><span class="line">      props: &#123; rowSpan?: number &#125;;</span><br><span class="line">    &#125; = &#123;</span><br><span class="line">      children: textForRender,</span><br><span class="line">      props: &#123;&#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 有 v 说明是需要合并的列</span></span><br><span class="line">    <span class="keyword">if</span> (v) &#123;</span><br><span class="line">      <span class="keyword">const</span> value = <span class="string">`<span class="subst">$&#123;v.name&#125;</span>_<span class="subst">$&#123;v.id&#125;</span>`</span>;</span><br><span class="line">      <span class="keyword">const</span> parentColVal =  <span class="string">`<span class="subst">$&#123;row[parentColName].name&#125;</span>_<span class="subst">$&#123;row[parentColName].id&#125;</span>`</span>;</span><br><span class="line">      <span class="keyword">if</span> (countObj[parentColVal]) &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">          * index表示第几行的数据</span></span><br><span class="line"><span class="comment">          * 当 行数 等于 这一列的标志位 的时候，说明这一个单元格是需要被显示的</span></span><br><span class="line"><span class="comment">          * 所以把这一个单元格的 rowspan 设置为它的重复次数</span></span><br><span class="line"><span class="comment">          *</span></span><br><span class="line"><span class="comment">          * 并且这时更新标志位的数值，加上当前单元格的重复次数</span></span><br><span class="line"><span class="comment">          * 后面当 行数 小于 这一列标志位 的时候，说明这一个单元格是需要被隐藏的，</span></span><br><span class="line"><span class="comment">          * 这时把 rowSpan 设置为 0</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">if</span> (index === countObj[<span class="string">`__dot_<span class="subst">$&#123;name&#125;</span>`</span>]) &#123;</span><br><span class="line">          obj.props.rowSpan = (countObj[parentColVal] <span class="keyword">as</span> IObjNumber)[value];</span><br><span class="line">          (countObj[<span class="string">`__dot_<span class="subst">$&#123;name&#125;</span>`</span>] <span class="keyword">as</span> number) += (countObj[</span><br><span class="line">            parentColVal</span><br><span class="line">          ] <span class="keyword">as</span> IObjNumber)[value];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index &lt; countObj[<span class="string">`__dot_<span class="subst">$&#123;name&#125;</span>`</span>]) &#123;</span><br><span class="line">          obj.props.rowSpan = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> renderContent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上，终于把表格合并单元格功能给完成了。下面就可以愉快的开始想怎么解决导出excel了。</p><h2 id="二、-导出excel功能的实现"><a href="#二、-导出excel功能的实现" class="headerlink" title="二、 导出excel功能的实现"></a>二、 导出excel功能的实现</h2><p>导出excel功能使用的是 <a href="https://github.com/SheetJS/sheetjs" target="_blank" rel="noopener">SheetJS</a> 这个库。</p><p>并且参考了这位大佬的文章 <a href="http://blog.haoji.me/js-excel.html" target="_blank" rel="noopener">http://blog.haoji.me/js-excel.html</a></p><p>遇到的坑点就是，js-xlsx 默认不支持设置样式。但是经过一番查找，发现了一个叫 <a href="https://github.com/protobi/js-xlsx" target="_blank" rel="noopener">xlsx-style</a> 的库，使用这个库就可以给导出的excel设置样式。</p><h3 id="通过dom节点导出"><a href="#通过dom节点导出" class="headerlink" title="通过dom节点导出"></a>通过dom节点导出</h3><p>具体的使用方式如下：</p><ol><li>下载 <code>js-xlsx/dist/xlsx.full.min.js</code> 到项目中；</li><li>下载 <code>xlsx-style/dist/xlsx.full.min.js</code> 到项目中；</li><li>修改 <code>xlsx-style/dist/xlsx.full.min.js</code> 中的 <code>XLSX</code> 变量 为<code>XLSX_STYLE</code>，因为两个文件都是默认设置全局变量 <strong>XLSX</strong>，而我们只需要在最后导出的时候使用 xlsx-style 提供的方法，而其他工具方法还是使用 js-xlsx 中的；</li><li>在项目的index.html中引入这两个文件；</li><li><p>js-xlsx 支持从dom节点导出excel，所以方便起见直接用dom节点导出。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dom = <span class="built_in">document</span>.querySelector(<span class="string">'.ant-table-body'</span>);</span><br><span class="line"><span class="keyword">const</span> sheets = XLSX.utils.table_to_book(dom).Sheets.Sheet1;</span><br></pre></td></tr></table></figure></li><li><p>给 sheet 设置样式，下面给出我的设置作为参考，更多设置请自行参考 <a href="https://github.com/protobi/js-xlsx#cell-styles" target="_blank" rel="noopener">xlsx-style#cell-styles</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setSheetStyle</span>(<span class="params">sheet: ISheet, colNameList:string[]</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 设置列宽</span></span><br><span class="line">  sheet[<span class="string">'!cols'</span>] = colNameList.map(<span class="function"><span class="params">item</span> =&gt;</span> (&#123; <span class="attr">wpx</span>: <span class="number">200</span> &#125;));</span><br><span class="line">  <span class="built_in">Object</span>.keys(sheet).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> sheet[key] === <span class="string">'object'</span>) &#123;</span><br><span class="line">      <span class="comment">// 第一行是标题行</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="regexp">/^[A-Z]+1$/</span>.test(key)) &#123;</span><br><span class="line">        sheet[key].s = &#123;</span><br><span class="line">          font: &#123;</span><br><span class="line">            sz: <span class="number">18</span>, <span class="comment">// 字体大小为18px</span></span><br><span class="line">            bold: <span class="literal">true</span>,<span class="comment">// 加粗</span></span><br><span class="line">          &#125;,</span><br><span class="line">          alignment: &#123;</span><br><span class="line">            vertical: <span class="string">'center'</span>, <span class="comment">// 垂直居中</span></span><br><span class="line">            wrapText: <span class="literal">true</span>, <span class="comment">// 自动换行</span></span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        sheet[key].s = &#123;</span><br><span class="line">          alignment: &#123;</span><br><span class="line">            vertical: <span class="string">'center'</span>,</span><br><span class="line">            wrapText: <span class="literal">true</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 sheet2blob 这个方法中 调用 <strong><code>XLSX_STYLE.write</code></strong> 方法来创建 workbook，上面一步设置的样式才会生效。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sheet2blob</span>(<span class="params">sheet: ISheet, name?: string</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> sheetName = name || <span class="string">'sheet1'</span>;</span><br><span class="line">  <span class="keyword">const</span> workbook: &#123;</span><br><span class="line">    SheetNames: string[];</span><br><span class="line">    Sheets: &#123; [k: string]: any &#125;; <span class="comment">//多个sheet</span></span><br><span class="line">  &#125; = &#123;</span><br><span class="line">    SheetNames: [sheetName],</span><br><span class="line">    Sheets: &#123;&#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">  workbook.Sheets[sheetName] = sheet;</span><br><span class="line">  <span class="comment">// 生成excel的配置项</span></span><br><span class="line">  <span class="keyword">var</span> wopts = &#123;</span><br><span class="line">    bookType: <span class="string">'xlsx'</span>, <span class="comment">// 要生成的文件类型</span></span><br><span class="line">    bookSST: <span class="literal">false</span>, <span class="comment">// 是否生成Shared String Table，官方解释是，如果开启生成速度会下降，但在低版本IOS设备上有更好的兼容性</span></span><br><span class="line">    type: <span class="string">'binary'</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 这里调用 XLSX_STYLE 的 write 方法</span></span><br><span class="line">  <span class="keyword">const</span> wbout = XLSX_STYLE.write(workbook, wopts);</span><br><span class="line">  <span class="keyword">const</span> blob = <span class="keyword">new</span> Blob([s2ab(wbout)], &#123; <span class="attr">type</span>: <span class="string">'application/octet-stream'</span> &#125;);</span><br><span class="line">  <span class="comment">// 字符串转ArrayBuffer</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">s2ab</span>(<span class="params">s: any</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(s.length);</span><br><span class="line">    <span class="keyword">const</span> view = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(buf);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i != s.length; ++i) view[i] = s.charCodeAt(i) &amp; <span class="number">0xff</span>;</span><br><span class="line">    <span class="keyword">return</span> buf;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> blob;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>导出excel文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用的打开下载对话框方法，没有测试过具体兼容性</span></span><br><span class="line"><span class="comment"> * @param url 下载地址，也可以是一个blob对象，必选</span></span><br><span class="line"><span class="comment"> * @param saveName 保存文件名，可选</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">openDownloadDialog</span>(<span class="params">url: string | Blob, saveName?: string</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> url == <span class="string">'object'</span> &amp;&amp; url <span class="keyword">instanceof</span> Blob) &#123;</span><br><span class="line">    url = URL.createObjectURL(url); <span class="comment">// 创建blob地址</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> aLink = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">  aLink.href = url;</span><br><span class="line">  aLink.download = saveName || <span class="string">''</span>; <span class="comment">// HTML5新增的属性，指定保存文件名，可以不要后缀，注意，file:///模式下不会生效</span></span><br><span class="line">  <span class="keyword">let</span> event;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.MouseEvent) &#123;</span><br><span class="line">    event = <span class="keyword">new</span> MouseEvent(<span class="string">'click'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    event = <span class="built_in">document</span>.createEvent(<span class="string">'MouseEvents'</span>);</span><br><span class="line">    event.initMouseEvent(</span><br><span class="line">      <span class="string">'click'</span>,</span><br><span class="line">      <span class="literal">true</span>,</span><br><span class="line">      <span class="literal">false</span>,</span><br><span class="line">      <span class="built_in">window</span>,</span><br><span class="line">      <span class="number">0</span>,</span><br><span class="line">      <span class="number">0</span>,</span><br><span class="line">      <span class="number">0</span>,</span><br><span class="line">      <span class="number">0</span>,</span><br><span class="line">      <span class="number">0</span>,</span><br><span class="line">      <span class="literal">false</span>,</span><br><span class="line">      <span class="literal">false</span>,</span><br><span class="line">      <span class="literal">false</span>,</span><br><span class="line">      <span class="literal">false</span>,</span><br><span class="line">      <span class="number">0</span>,</span><br><span class="line">      <span class="literal">null</span>,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  aLink.dispatchEvent(event);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">downloadExcelWithDom</span>(<span class="params">dom: HTMLTableElement, saveName?: string</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> fileName = <span class="string">`<span class="subst">$&#123;saveName&#125;</span>.xlsx`</span> || <span class="string">'导出.xlsx'</span>;</span><br><span class="line">  <span class="keyword">const</span> sheet = XLSX.utils.table_to_book(dom).Sheets.Sheet1;</span><br><span class="line">  setSheetStyle(sheet);</span><br><span class="line">  openDownloadDialog(sheet2blob(sheet), fileName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>以上就完成了导出excel功能。由于兼容性问题，有些浏览器上可能无法通过dom节点导出，这时候就只能自己设置数据来导出了。下面也讲讲怎么通过自己设置数据来导出。</p><h3 id="通过数据导出"><a href="#通过数据导出" class="headerlink" title="通过数据导出"></a>通过数据导出</h3><ol><li><p>使用 <code>XLSX.utils.aoa_to_sheet</code> 方法来生成sheet，这个方法可以将一个二维数组转成sheet格式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSheetData</span>(<span class="params">sortableData:&#123; [k: string]: ITreeDepsDataItem &#125;[], colNameList: string[]</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> aoa: string[][] = [];</span><br><span class="line">  aoa.push(colNameList);</span><br><span class="line">  sortableData.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    aoa.push(</span><br><span class="line">      <span class="comment">// 这里只是简单的把单元格的内容设置为name属性</span></span><br><span class="line">      <span class="comment">// 如果需要自定义单元格内容的话，可以使用 table 组件里设置好的 columns</span></span><br><span class="line">      colNameList.map(<span class="function"><span class="params">colName</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (item[colName]) &#123;</span><br><span class="line">          <span class="keyword">return</span> item[colName].name;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> lastColName = colNameList[<span class="built_in">Object</span>.keys(item).length - <span class="number">1</span>];</span><br><span class="line">          <span class="keyword">return</span> (item[lastColName] <span class="keyword">as</span> any)[colName] || <span class="string">'-'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;),</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> XLSX.utils.aoa_to_sheet(aoa);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>循环表格的列跟行，计算需要合并的单元格，核心逻辑和和前面说的 <code>renderContent</code> 方法是相同的。单元格的合并需要设置 <code>sheet[!merges]</code>，格式如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 表示从 第0行第0列 到 第0行第2列 的单元格合并</span></span><br><span class="line"><span class="comment">// 也就是第0行前三个单元格合并</span></span><br><span class="line">sheet[!merges] = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 表示start=</span></span><br><span class="line">    s:&#123;</span><br><span class="line">      r: <span class="number">0</span>, <span class="comment">// 表示row</span></span><br><span class="line">      c: <span class="number">0</span>, <span class="comment">// 表示col的</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 表示end</span></span><br><span class="line">    e:&#123;</span><br><span class="line">      r: <span class="number">0</span>,</span><br><span class="line">      c: <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>下面是获取每一行需要合并的s和e</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">_.forEach(colNameList, (item, colIndex) =&gt; &#123;</span><br><span class="line">  _.forEach(sortableData, (row, rowIndex) =&gt; &#123;</span><br><span class="line">    <span class="comment">// getRepeatNum 方法同 renderContent，repeat就相当于rowSpan</span></span><br><span class="line">    <span class="keyword">const</span> repeat = getRepeatNum(row[item], row, rowIndex, item);</span><br><span class="line">    <span class="comment">// 只对 repeat 大于1 的单元格处理</span></span><br><span class="line">    <span class="comment">// 并且这里列是固定的，只有行会发生合并，所以会简单一点</span></span><br><span class="line">    <span class="keyword">if</span> (repeat &gt; <span class="number">1</span>) &#123;</span><br><span class="line">      sheetMerges.push(&#123;</span><br><span class="line">        s: &#123;</span><br><span class="line">          r: rowIndex + <span class="number">1</span>, <span class="comment">// 多了标题栏 所以要加 1</span></span><br><span class="line">          c: colIndex,</span><br><span class="line">        &#125;,</span><br><span class="line">        e: &#123;</span><br><span class="line">          r: rowIndex + repeat - <span class="number">1</span> + <span class="number">1</span>, <span class="comment">// 多了标题栏 所以要加 1</span></span><br><span class="line">          c: colIndex,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>最后 设置样式 和 导出 这两步和上面通过dom节点导出一样，不再赘述。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近接到个报表的需求，需要展示&lt;strong&gt;合并单元格的表格&lt;/strong&gt;，并且还要支持&lt;strong&gt;导出excel&lt;/strong&gt;。粗略一看，不就两个功能嘛，但是在实现的过程中发现其实要做的还是挺多的，所以在这里记录分享一下。&lt;/p&gt;
&lt;h2 id=&quot;一、合并单元格的实现&quot;&gt;&lt;a href=&quot;#一、合并单元格的实现&quot; class=&quot;headerlink&quot; title=&quot;一、合并单元格的实现&quot;&gt;&lt;/a&gt;一、合并单元格的实现&lt;/h2&gt;
    
    </summary>
    
      <category term="web前端" scheme="http://hzyhbk.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="antd-table" scheme="http://hzyhbk.github.io/tags/antd-table/"/>
    
      <category term="js-xlsx" scheme="http://hzyhbk.github.io/tags/js-xlsx/"/>
    
      <category term="react" scheme="http://hzyhbk.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>2020年元旦快乐</title>
    <link href="http://hzyhbk.github.io/start/happy-2020/"/>
    <id>http://hzyhbk.github.io/start/happy-2020/</id>
    <published>2020-01-01T04:52:12.000Z</published>
    <updated>2020-01-01T05:13:19.608Z</updated>
    
    <content type="html"><![CDATA[<p>2020年元旦快乐！</p><p>2020年第一天，给博客换了个logo，顺便分享一件早上发生的糗事。</p><a id="more"></a><p>早上起床，看外面有太阳，于是就想拿被子去顶楼晒一晒。我住11楼，顶楼在14楼。起床，扛上被子，进电梯，按14楼没反应，猛地反应过来电梯从今天起启用梯控卡。可是我没带，只好尴尬的随电梯到了一楼。在一楼扛着被子等了一会，没等到人上楼，迫不得已，自己扛着被子爬上了11楼…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2020年元旦快乐！&lt;/p&gt;
&lt;p&gt;2020年第一天，给博客换了个logo，顺便分享一件早上发生的糗事。&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://hzyhbk.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>echarts-for-react 修改点击图例事件</title>
    <link href="http://hzyhbk.github.io/start/echarts-for-react%E4%BF%AE%E6%94%B9%E7%82%B9%E5%87%BB%E5%9B%BE%E4%BE%8B%E4%BA%8B%E4%BB%B6/"/>
    <id>http://hzyhbk.github.io/start/echarts-for-react修改点击图例事件/</id>
    <published>2019-12-28T09:37:48.000Z</published>
    <updated>2019-12-28T10:05:55.128Z</updated>
    
    <content type="html"><![CDATA[<p><strong>需求</strong>：点击图例，则选中该项，将其他项置灰；再次点击，恢复选中所有选项</p><p><strong>做法</strong>：监听下<code>legendselectchanged</code>事件，用一个变量来保存上次点击的图例的名字，</p><ul><li>如果点击的图例名称和保存的一致，说明是再次点击，应该恢复所有选项，把所有图例都置为 true;</li><li>如果点击的图例名称和保存的不一致，说明点击了另外的图例，这是需要更新变量，并且把这次点击的图例的selected设置为true，其他的设置为false。</li></ul><p><strong>坑点</strong>：如果在<code>legendselectchanged</code>里调用 echarts 的 <a href="https://www.echartsjs.com/zh/api.html#action.legend.legendToggleSelect" target="_blank" rel="noopener">dispatchActions</a>，会陷入循环调用，如果还是想调用 <code>dispatchActions</code>方法，可参考这篇<a href="https://segmentfault.com/q/1010000014133645" target="_blank" rel="noopener">文章</a>。我就直接调用setOption了。</p><p>监听 legendselectchanged 事件代码如下：<br><a id="more"></a><br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">onLegendSelectChanged = (e: &#123;</span><br><span class="line">    name: string;</span><br><span class="line">    selected: &#123; [k: string]: boolean &#125;;</span><br><span class="line">  &#125;) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> selected = <span class="built_in">Object</span>.assign(&#123;&#125;, e.selected);</span><br><span class="line">    <span class="comment">// 用一个变量来保存上次点击的图例的名字</span></span><br><span class="line">    <span class="comment">// 如果新点击的图例名称和保存的一致，说明是再次点击，应该恢复所有选项，</span></span><br><span class="line">    <span class="comment">// 就是把所有图例都置为true</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.clickedLegendName === e.name) &#123;</span><br><span class="line">      <span class="keyword">this</span>.clickedLegendName = <span class="string">''</span>;</span><br><span class="line">      <span class="built_in">Object</span>.keys(selected).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">        selected[key] = <span class="literal">true</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 如果和保存的名称不一致，说明点击了另外的图例</span></span><br><span class="line">      <span class="comment">// 更新clickedLegendName</span></span><br><span class="line">      <span class="comment">// 把这次点击的图例的selected设置为true，其他的设置为false</span></span><br><span class="line">      <span class="keyword">this</span>.clickedLegendName = e.name;</span><br><span class="line">      <span class="built_in">Object</span>.keys(selected).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (key === e.name) &#123;</span><br><span class="line">          selected[key] = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          selected[key] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 重新调用 getEchartsOption</span></span><br><span class="line">    <span class="keyword">const</span> option = <span class="keyword">this</span>.getEchartsOption(selected);</span><br><span class="line">    <span class="comment">// 重新调用 setOption</span></span><br><span class="line">    <span class="keyword">this</span>.echartRef.setOption(option);</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure></p><p><br><hr><br></p><p>组件完整代码如下：<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; PureComponent &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">'lodash'</span>;</span><br><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">'styled-components'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactEcharts <span class="keyword">from</span> <span class="string">'echarts-for-react'</span>;</span><br><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">'moment'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Root = styled.div<span class="string">``</span>;</span><br><span class="line"></span><br><span class="line">type ILineChartProps = &#123;</span><br><span class="line">  className?: string;</span><br><span class="line">  style?: React.CSSProperties;</span><br><span class="line">  rawData: &#123;</span><br><span class="line">    data: IRawChartDataItem[];</span><br><span class="line">    series: &#123;</span><br><span class="line">      name: string;</span><br><span class="line">      data: number[];</span><br><span class="line">      type: <span class="string">'line'</span>;</span><br><span class="line">      areaStyle: &#123;&#125;;</span><br><span class="line">    &#125;[];</span><br><span class="line">  &#125;;</span><br><span class="line">  loading: boolean;</span><br><span class="line">&#125;;</span><br><span class="line">type ILineChartState = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LineChart</span> <span class="keyword">extends</span> <span class="title">PureComponent</span>&lt;<span class="title">ILineChartProps</span>, <span class="title">ILineChartState</span>&gt; </span>&#123;</span><br><span class="line">  echartRef: any = <span class="literal">null</span>;</span><br><span class="line">  clickedLegendName: string;</span><br><span class="line"></span><br><span class="line">  getEchartsOption = <span class="function">(<span class="params">selected: &#123; [k: string]: boolean &#125; = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">      rawData: &#123; data, series &#125;,</span><br><span class="line">    &#125; = <span class="keyword">this</span>.props;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> option = &#123;</span><br><span class="line">      grid: &#123;</span><br><span class="line">        top: <span class="number">24</span>,</span><br><span class="line">        bottom: <span class="number">8</span>,</span><br><span class="line">        left: <span class="number">24</span>,</span><br><span class="line">        right: <span class="number">36</span>,</span><br><span class="line">        containLabel: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      legend: &#123; <span class="attr">data</span>: series.map(<span class="function"><span class="params">item</span> =&gt;</span> item.name), selected &#125;,</span><br><span class="line">      tooltip: &#123;</span><br><span class="line">        trigger: <span class="string">'axis'</span>,</span><br><span class="line">        formatter(params: any) &#123;</span><br><span class="line">          <span class="keyword">let</span> text = <span class="string">''</span>;</span><br><span class="line">          <span class="keyword">if</span> (_.isArray(params)) &#123;</span><br><span class="line">            text = <span class="string">`<span class="subst">$&#123;moment(<span class="built_in">Number</span>(params[<span class="number">0</span>].axisValue)).format(</span></span></span><br><span class="line"><span class="string"><span class="subst">              <span class="string">'YYYY-MM-DD HH:mm:ss'</span>,</span></span></span><br><span class="line"><span class="string"><span class="subst">            )&#125;</span>&lt;br/&gt;`</span>;</span><br><span class="line">            _.forEach(params, obj =&gt; &#123;</span><br><span class="line">              <span class="keyword">let</span> value = obj.value;</span><br><span class="line">              text = <span class="string">`<span class="subst">$&#123;text&#125;</span><span class="subst">$&#123;obj.marker&#125;</span><span class="subst">$&#123;obj.seriesName&#125;</span>: <span class="subst">$&#123;value&#125;</span>&lt;br/&gt;`</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            text = <span class="string">`<span class="subst">$&#123;moment(<span class="built_in">Number</span>(params.axisValue)).format(</span></span></span><br><span class="line"><span class="string"><span class="subst">              <span class="string">'YYYY-MM-DD HH:mm:ss'</span>,</span></span></span><br><span class="line"><span class="string"><span class="subst">            )&#125;</span>&lt;br/&gt;`</span>;</span><br><span class="line">            text = <span class="string">`<span class="subst">$&#123;text&#125;</span><span class="subst">$&#123;params&#125;</span><span class="subst">$&#123;params.seriesName&#125;</span>: <span class="subst">$&#123;params.value&#125;</span>`</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> text;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      xAxis: &#123;</span><br><span class="line">        data: data.map(<span class="function"><span class="params">o</span> =&gt;</span> o.timestamp),</span><br><span class="line">        axisLabel: &#123;</span><br><span class="line">          formatter(value: string) &#123;</span><br><span class="line">            <span class="keyword">return</span> moment(<span class="built_in">Number</span>(value)).format(<span class="string">'HH:mm'</span>);</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      yAxis: &#123;</span><br><span class="line">        type: <span class="string">'value'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      series: series,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> option;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  onLegendSelectChanged = (e: &#123;</span><br><span class="line">    name: string;</span><br><span class="line">    selected: &#123; [k: string]: boolean &#125;;</span><br><span class="line">  &#125;) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> selected = <span class="built_in">Object</span>.assign(&#123;&#125;, e.selected);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.clickedLegendName === e.name) &#123;</span><br><span class="line">      <span class="keyword">this</span>.clickedLegendName = <span class="string">''</span>;</span><br><span class="line">      <span class="built_in">Object</span>.keys(selected).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">        selected[key] = <span class="literal">true</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.clickedLegendName = e.name;</span><br><span class="line">      <span class="built_in">Object</span>.keys(selected).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (key === e.name) &#123;</span><br><span class="line">          selected[key] = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          selected[key] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> option = <span class="keyword">this</span>.getEchartsOption(selected);</span><br><span class="line">    <span class="keyword">this</span>.echartRef.setOption(option);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; className, style, loading &#125; = <span class="keyword">this</span>.props;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Root</span><br><span class="line">        className=&#123;className&#125;</span><br><span class="line">        style=&#123;style&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;ReactEcharts</span><br><span class="line">          ref=&#123;(ref:any) =&gt; (<span class="keyword">this</span>.echartRef = ref &amp;&amp; ref.getEchartsInstance())&#125;</span><br><span class="line">          option=&#123;<span class="keyword">this</span>.getEchartsOption()&#125;</span><br><span class="line">          showLoading=&#123;loading&#125;</span><br><span class="line">          onEvents=&#123;&#123;</span><br><span class="line">            legendselectchanged: <span class="keyword">this</span>.onLegendSelectChanged,</span><br><span class="line">          &#125;&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;<span class="regexp">/Root&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;需求&lt;/strong&gt;：点击图例，则选中该项，将其他项置灰；再次点击，恢复选中所有选项&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;做法&lt;/strong&gt;：监听下&lt;code&gt;legendselectchanged&lt;/code&gt;事件，用一个变量来保存上次点击的图例的名字，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果点击的图例名称和保存的一致，说明是再次点击，应该恢复所有选项，把所有图例都置为 true;&lt;/li&gt;
&lt;li&gt;如果点击的图例名称和保存的不一致，说明点击了另外的图例，这是需要更新变量，并且把这次点击的图例的selected设置为true，其他的设置为false。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;坑点&lt;/strong&gt;：如果在&lt;code&gt;legendselectchanged&lt;/code&gt;里调用 echarts 的 &lt;a href=&quot;https://www.echartsjs.com/zh/api.html#action.legend.legendToggleSelect&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;dispatchActions&lt;/a&gt;，会陷入循环调用，如果还是想调用 &lt;code&gt;dispatchActions&lt;/code&gt;方法，可参考这篇&lt;a href=&quot;https://segmentfault.com/q/1010000014133645&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;文章&lt;/a&gt;。我就直接调用setOption了。&lt;/p&gt;
&lt;p&gt;监听 legendselectchanged 事件代码如下：&lt;br&gt;
    
    </summary>
    
      <category term="web前端" scheme="http://hzyhbk.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="echarts-for-react" scheme="http://hzyhbk.github.io/tags/echarts-for-react/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://hzyhbk.github.io/start/hello-world/"/>
    <id>http://hzyhbk.github.io/start/hello-world/</id>
    <published>2018-12-29T16:00:00.000Z</published>
    <updated>2020-01-08T12:50:05.482Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Hello World 中文意思是『你好,世界』。因为《The C Programming Language》中使用它做为第一个演示程序，非常著名，所以后来的程序员在学习编程或进行设备调试时延续了这一习惯。 ——百度百科</p></blockquote><p>我自己开始学写代码的时候，写的第一段代码也是Hello World, 所以我把它作为博客的第一篇文章。</p><p>控制台版本<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'Hello World'</span>)</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>React函数式组件版本<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &lt;div&gt;Hello World&lt;/div&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>React类组件版本<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;div&gt;Hello World&lt;/div&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Hello World 中文意思是『你好,世界』。因为《The C Programming Language》中使用它做为第一个演示程序，非常著名，所以后来的程序员在学习编程或进行设备调试时延续了这一习惯。 ——百度百科&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我自己开始学写代码的时候，写的第一段代码也是Hello World, 所以我把它作为博客的第一篇文章。&lt;/p&gt;
&lt;p&gt;控制台版本&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Hello World&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="web前端" scheme="http://hzyhbk.github.io/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="hello-world" scheme="http://hzyhbk.github.io/tags/hello-world/"/>
    
  </entry>
  
</feed>
